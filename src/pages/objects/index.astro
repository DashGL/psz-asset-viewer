---
import { readdirSync, existsSync, statSync, readFileSync } from 'fs';
import { join } from 'path';

// Scan the public/objects directory for object models
const objectsDir = './public/objects';
const objects = [];

if (existsSync(objectsDir)) {
  const objectFolders = readdirSync(objectsDir).filter(name => {
    const fullPath = join(objectsDir, name);
    return statSync(fullPath).isDirectory();
  });

  for (const folder of objectFolders) {
    // Try to read info.json to get object metadata
    const infoPath = join(objectsDir, folder, 'info.json');
    if (existsSync(infoPath)) {
      try {
        const info = JSON.parse(readFileSync(infoPath, 'utf-8'));
        objects.push({
          id: folder,
          displayName: folder.toUpperCase(),
          ...info
        });
      } catch (e) {
        objects.push({
          id: folder,
          displayName: folder.toUpperCase(),
          modelCount: 0
        });
      }
    } else {
      objects.push({
        id: folder,
        displayName: folder.toUpperCase(),
        modelCount: 0
      });
    }
  }
}

// Sort objects by id
objects.sort((a, b) => a.id.localeCompare(b.id));

// Group objects by category
function getObjectCategory(id: string): string {
  if (id.startsWith('special_')) {
    return 'Special Objects';
  }

  // Extract scene number from ID (e.g., "00_o00a" -> "00")
  const match = id.match(/^(\d{2})_/);
  if (match) {
    const sceneNum = match[1];
    const sceneNames: { [key: string]: string } = {
      '00': 'City (Scene 00)',
      '01': 'Gurhacia Valley (Scene 01)',
      '02': 'Ozette Wetlands (Scene 02)',
      '03': 'Rioh Snowfield (Scene 03)',
      '04': 'Makara Ruins (Scene 04)',
      '05': 'Oblivion City Paru (Scene 05)',
      '06': 'Arca Plant (Scene 06)',
      '07': 'Dark Shrine (Scene 07)',
      '08': 'Eternal Tower (Scene 08)'
    };
    return sceneNames[sceneNum] || `Scene ${sceneNum}`;
  }

  return 'Other';
}

const groupedObjects: { [key: string]: typeof objects } = {};
for (const obj of objects) {
  const category = getObjectCategory(obj.id);
  if (!groupedObjects[category]) {
    groupedObjects[category] = [];
  }
  groupedObjects[category].push(obj);
}
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Objects - PSZ Asset Viewer</title>
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        background: #0a0a0a;
        color: #ffffff;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
        min-height: 100vh;
        padding: 2rem;
      }

      .container {
        max-width: 1200px;
        margin: 0 auto;
      }

      .header {
        margin-bottom: 2rem;
      }

      .header h1 {
        font-size: 2.5rem;
        margin-bottom: 0.5rem;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
      }

      .header p {
        color: #aaa;
        font-size: 1.1rem;
      }

      .back-link {
        display: inline-block;
        margin-bottom: 1.5rem;
        padding: 0.5rem 1rem;
        background: #2a2a2a;
        border: 1px solid #333;
        border-radius: 4px;
        color: #fff;
        text-decoration: none;
        transition: background 0.2s;
      }

      .back-link:hover {
        background: #3a3a3a;
      }

      .category-section {
        margin-bottom: 3rem;
      }

      .category-heading {
        font-size: 1.5rem;
        font-weight: bold;
        color: #667eea;
        margin-bottom: 1rem;
        padding-bottom: 0.5rem;
        border-bottom: 2px solid #667eea33;
      }

      .object-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        gap: 1rem;
      }

      .object-card {
        background: linear-gradient(135deg, #667eea22 0%, #764ba222 100%);
        border: 1px solid #333;
        border-radius: 8px;
        padding: 1rem;
        text-decoration: none;
        color: #fff;
        transition: all 0.3s ease;
        display: flex;
        flex-direction: column;
      }

      .object-card:hover {
        transform: translateY(-4px);
        border-color: #667eea;
        box-shadow: 0 8px 24px rgba(102, 126, 234, 0.2);
      }

      .object-name {
        font-size: 0.9rem;
        font-weight: bold;
        margin-bottom: 0.5rem;
        font-family: 'Courier New', monospace;
        word-break: break-all;
      }

      .object-stats {
        font-size: 0.75rem;
        color: #aaa;
        margin-top: auto;
      }

      .no-objects {
        text-align: center;
        padding: 4rem 2rem;
        color: #aaa;
      }

      .no-objects h2 {
        margin-bottom: 1rem;
      }

      .no-objects code {
        background: #1a1a1a;
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <a href="/" class="back-link">‚Üê Back to Home</a>

      <div class="header">
        <h1>Objects</h1>
        <p>{objects.length} object sets available</p>
      </div>

      {objects.length === 0 ? (
        <div class="no-objects">
          <h2>No object models found</h2>
          <p>Run <code>npm run processObjects</code> to convert object models.</p>
        </div>
      ) : (
        <div>
          {Object.entries(groupedObjects).sort().map(([category, categoryObjects]) => (
            <div class="category-section">
              <h2 class="category-heading">{category} ({categoryObjects.length})</h2>
              <div class="object-grid">
                {categoryObjects.map(obj => (
                  <a href={`/objects/${obj.id}`} class="object-card">
                    <div class="object-name">{obj.displayName}</div>
                    <div class="object-stats">
                      {obj.modelCount} models
                    </div>
                  </a>
                ))}
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  </body>
</html>
